

const targetClass = 'md-expandable-fullscreen';
const containerClass = 'md-expandable-fullscreen-container';
const closeBtnClass = 'md-expandable-close';
const contentClass = 'md-expandable-content';

const coverOpened = 'md-expandable-content--opened';
const targetClicked = 'md-expandable--clicked';	// for target got clicked to expand
const targetOut = 'md-expandable--out'; // for target not clicked, animated out

// put targetElement for expand
// if no input, it will find all 'md-expandable-fullscreen' class
// It'll create a <div class='md-expandable-fullscreen--content'> to display to if there's not already
export function MDExpandableFullscreen(targetEle) {

	
	this.targets = [];
	if (targetEle === "undefined") {
		var eles = document.getElementsByClassName(targetClass);
		if (eles==null) {
			console.error('found no expandle element');
		} else {
			for (var i=0; i<eles.length; i++) {
				this.targets.push(eles[i]);
			}
		}
	} else {
		this.targets.push(targetEle);
	}
	
	var container = document.getElementsByClassName(containerClass);
	if (container==null) {
		this.cover = document.createElement('div');
		this.cover.classList.add(containerClass);
		this.cover.innerHTML = `<a href="#" id="close-content" class="` + closeBtnClass + `"><span class="x-1"></span><span class="x-2"></span></a>`;	// default close button
	} else {
		this.cover = container[0];
	}
	
	var closeBtn = this.cover.getElementsByClassName(closeBtnClass);
	if (closeBtn==null) {
		this.closeBtn = null;
	} else {
		this.closeBtn = closeBtn[0];
		closeBtn[0].addEventListener(this.closeExpandable);
	}
	
	var content = this.cover.getElementsByClassName(contentClass);
	if (content==null) {
		this.content = document.createElement('div');
		this.content.classList.add(contentClass);
		this.cover.appendChild(this.content);
	} else {
		this.content = content[0];
	}
	
	this.isPageOpened = false;
	
	// add event listener
	for (var i=0; i<this.targets.length; i++) {
		this.targets[i].addEventListener('click', this.onTargetClick(this.target[i]));
	}
	
	this.onTargetClick = function(tgr) {
		this.curTarget = tgr;
		// add the 'clicked' class to the card, so it animates out
		this.curTarget.classList.add(targetClicked);
		// animate the card 'cover' after a 500ms delay
		setTimeout(function() {this.animateCoverUp(this.curTarget)}, 500);
		// animate out the other cards
		this.animateOtherCards(this.curTarget, true);
		// add the open class to the page content
		this.cover.classList.add(coverOpened);
	}


	/*
	* This effect is created by taking a separate 'cover' div, placing
	* it in the same position as the clicked card, and animating it to
	* become the background of the opened 'page'.
	* It looks like the card itself is animating in to the background,
	* but doing it this way is more performant (because the cover div is
	* absolutely positioned and has no children), and there's just less
	* having to deal with z-index and other elements in the card
	*/
	this.animateCoverUp = function(tgr) {
	  // get the position of the clicked tgr
	  var cardPosition = tgr.getBoundingClientRect();
	  // get the style of the clicked tgr
	  this.setCoverPosition(cardPosition);
	  this.scaleCoverToFillWindow(cardPosition);
	  // update the content of the opened page
	  this.content.appendChild(tgr.cloneNode(true));	// dont remove this target from its parent
	  setTimeout(function() {
		// update the scroll position to 0 (so it is at the top of the 'opened' page)
		//window.scroll(0, 0);
		// set page to open
		this.pageIsOpen = true;
	  }, 300);
	}
	
	
	/* When close */
	this.closeExpandable = function() {
	  console.log("close clicked");
	  // remove the open class so the page content animates out
	  this.cover.classList.remove(coverOpened);
	  // animate the cover back to the original position card and size
	  this.animateCoverBack(this.currentCard);
	  // animate in other cards
	  this.animateOtherCards(currentCard, false);
	}

	this.animateCoverBack = function(tgr) {
	  var cardPosition = tgr.getBoundingClientRect();
	  // the original tgr may be in a different position, because of scrolling, so the cover position needs to be reset before scaling back down
	  this.setCoverPosition(cardPosition);
	  this.scaleCoverToFillWindow(cardPosition);
	  // animate scale back to the tgr size and position
	  this.cover.style.transform = 'scaleX('+1+') scaleY('+1+') translate3d('+(0)+'px, '+(0)+'px, 0px)';
	  setTimeout(function() {
		// set content back to empty
		this.content.innerHTML = '';
		// style the cover to 0x0 so it is hidden
		this.cover.style.width = '0px';
		this.cover.style.height = '0px';
		this.pageIsOpen = false;
		// remove the clicked class so the tgr animates back in
		//currentCard.className = currentCard.className.replace(' clicked', '');
		this.currentCard.classList.remove(targetClicked);
	  }, 301);
	}

	this.setCoverPosition = function(cardPosition) {
	  // style the cover so it is in exactly the same position as the card
	  this.cover.style.left = cardPosition.left + 'px';
	  this.cover.style.top = cardPosition.top + 'px';
	  this.cover.style.width = cardPosition.width + 'px';
	  this.cover.style.height = cardPosition.height + 'px';
	}

	this.scaleCoverToFillWindow = function(cardPosition) {
	  // calculate the scale and position for the card to fill the page,
	  var scaleX = window.innerWidth / cardPosition.width;
	  var scaleY = window.innerHeight / cardPosition.height;
	  var offsetX = (window.innerWidth / 2 - cardPosition.width / 2 - cardPosition.left) / scaleX;
	  var offsetY = (window.innerHeight / 2 - cardPosition.height / 2 - cardPosition.top) / scaleY;
	  // set the transform on the cover - it will animate because of the transition set on it in the CSS
	  this.cover.style.transform = 'scaleX('+scaleX+') scaleY('+scaleY+') translate3d('+(offsetX)+'px, '+(offsetY)+'px, 0px)';
	}

	this.animateOtherCards = function(tgr, out) {
	  var delay = 100;
	  for (var i = 0; i < this.targets.length; i++) {
		// animate cards on a stagger, 1 each 100ms
		if (this.targets[i] === tgr) continue;
		if (out) this.animateOutCard(this.targets[i], delay);
		else this.animateInCard(this.targets[i], delay);
		delay += 100;
	  }
	}

	// animations on individual cards (by adding/removing card names)
	this.animateOutCard = function(tgr, delay) {
	  setTimeout(function() {tgr.classList.add('out');}, delay);
	}

	this.animateInCard = function(tgr, delay) {
	  setTimeout(function() {tgr.classList.remove('out');}, delay);
	}

}
